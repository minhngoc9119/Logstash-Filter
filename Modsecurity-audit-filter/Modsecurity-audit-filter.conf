filter {
  if [type] == "modsecurity" in [tags] {
    ruby {
      code => '
        begin
          log_data = JSON.parse(event.get("message"))

          if log_data["audit_data"] && log_data["audit_data"]["messages"]
            messages = log_data["audit_data"]["messages"]

            info_array = []
            file_array = []
            line_array = []
            id_array = []
            msg_array = []
            data_array = []
            severity_array = []
            tag_array = []
            ver_array = []

            messages.each do |message|
              info_match = message.match(/^.*(?=\[file)/)
              info_array << info_match[0] if info_match

              file_array << message.match(/file "(.*?)"/)[1] if message.include?("file")
              line_array << message.match(/line "(.*?)"/)[1] if message.include?("line")
              id_array << message.match(/id "(.*?)"/)[1] if message.include?("id")
              msg_array << message.match(/msg "(.*?)"/)[1] if message.include?("msg")
              data_array << message.match(/data "(.*?)"/)[1] if message.include?("data")
              severity_array << message.match(/severity "(.*?)"/)[1] if message.include?("severity")
              tag_array << message.scan(/tag "(.*?)"/).flatten if message.include?("tag")
              ver_array << message.match(/ver "(.*?)"/)[1] if message.include?("ver")
            end

            event.set("audit_message.info", info_array)
            event.set("audit_message.file", file_array)
            event.set("audit_message.line", line_array)
            event.set("audit_message.id", id_array)
            event.set("audit_message.msg", msg_array)
            event.set("audit_message.data", data_array)
            event.set("audit_message.severity", severity_array)
            event.set("audit_message.tag", tag_array.flatten)
            event.set("audit_message.ver", ver_array.uniq)

          else
            event.set("audit_messages", "No audit data messages found in the log.")
          end

        rescue JSON::ParserError => e
          event.set("error_message", "Error parsing JSON log: #{e.message}")
        end
      '
    }
  }
}
